// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roadmap_query.sql

package roadmapgen

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRoadmap = `-- name: CreateRoadmap :one
INSERT INTO roadmaps (user_id, title, description, is_public, category, tags, difficulty)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, user_id, title, description, is_public, category, tags, difficulty, created_at
`

type CreateRoadmapParams struct {
	UserID      uuid.UUID `json:"user_id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	IsPublic    bool      `json:"is_public"`
	Category    string    `json:"category"`
	Tags        []string  `json:"tags"`
	Difficulty  string    `json:"difficulty"`
}

func (q *Queries) CreateRoadmap(ctx context.Context, arg CreateRoadmapParams) (Roadmap, error) {
	row := q.db.QueryRow(ctx, createRoadmap,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.IsPublic,
		arg.Category,
		arg.Tags,
		arg.Difficulty,
	)
	var i Roadmap
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.IsPublic,
		&i.Category,
		&i.Tags,
		&i.Difficulty,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRoadmap = `-- name: DeleteRoadmap :one
DELETE FROM roadmaps 
WHERE id = $1
RETURNING id, user_id, title, description, is_public, category, tags, difficulty, created_at
`

func (q *Queries) DeleteRoadmap(ctx context.Context, id uuid.UUID) (Roadmap, error) {
	row := q.db.QueryRow(ctx, deleteRoadmap, id)
	var i Roadmap
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.IsPublic,
		&i.Category,
		&i.Tags,
		&i.Difficulty,
		&i.CreatedAt,
	)
	return i, err
}

const getRoadmap = `-- name: GetRoadmap :one
SELECT id, user_id, title, description, created_at
FROM roadmaps
WHERE id = $1
`

type GetRoadmapRow struct {
	ID          uuid.UUID `json:"id"`
	UserID      uuid.UUID `json:"user_id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) GetRoadmap(ctx context.Context, id uuid.UUID) (GetRoadmapRow, error) {
	row := q.db.QueryRow(ctx, getRoadmap, id)
	var i GetRoadmapRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const listAllRoadmaps = `-- name: ListAllRoadmaps :many
SELECT id, user_id, title, description, is_public, category, tags, difficulty, created_at FROM roadmaps
`

func (q *Queries) ListAllRoadmaps(ctx context.Context) ([]Roadmap, error) {
	rows, err := q.db.Query(ctx, listAllRoadmaps)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Roadmap
	for rows.Next() {
		var i Roadmap
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.IsPublic,
			&i.Category,
			&i.Tags,
			&i.Difficulty,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserRoadmaps = `-- name: ListUserRoadmaps :many
SELECT id, user_id, title, description, is_public, category, tags, difficulty, created_at FROM roadmaps WHERE id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListUserRoadmaps(ctx context.Context, id uuid.UUID) ([]Roadmap, error) {
	rows, err := q.db.Query(ctx, listUserRoadmaps, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Roadmap
	for rows.Next() {
		var i Roadmap
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.IsPublic,
			&i.Category,
			&i.Tags,
			&i.Difficulty,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoadmap = `-- name: UpdateRoadmap :one
UPDATE roadmaps
SET
    title = $2,
    description = $3,
    is_public = $4,
    category = $5,
    tags = $6,
    difficulty = $7
WHERE id = $1
RETURNING id, user_id, title, description, is_public, category, tags, difficulty, created_at
`

type UpdateRoadmapParams struct {
	ID          uuid.UUID `json:"id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	IsPublic    bool      `json:"is_public"`
	Category    string    `json:"category"`
	Tags        []string  `json:"tags"`
	Difficulty  string    `json:"difficulty"`
}

func (q *Queries) UpdateRoadmap(ctx context.Context, arg UpdateRoadmapParams) (Roadmap, error) {
	row := q.db.QueryRow(ctx, updateRoadmap,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.IsPublic,
		arg.Category,
		arg.Tags,
		arg.Difficulty,
	)
	var i Roadmap
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.IsPublic,
		&i.Category,
		&i.Tags,
		&i.Difficulty,
		&i.CreatedAt,
	)
	return i, err
}
