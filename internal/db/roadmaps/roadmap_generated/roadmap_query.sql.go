// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roadmap_query.sql

package roadmapgen

import (
	"context"

	"github.com/google/uuid"
)

const createRoadmap = `-- name: CreateRoadmap :one
INSERT INTO roadmaps (owner_id, title, description, is_public)
VALUES ($1, $2, $3, $4)
RETURNING id, owner_id, title, description, is_public, category, tags, difficult, created_at
`

type CreateRoadmapParams struct {
	OwnerID     uuid.UUID `json:"owner_id"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	IsPublic    bool      `json:"is_public"`
}

func (q *Queries) CreateRoadmap(ctx context.Context, arg CreateRoadmapParams) (Roadmap, error) {
	row := q.db.QueryRow(ctx, createRoadmap,
		arg.OwnerID,
		arg.Title,
		arg.Description,
		arg.IsPublic,
	)
	var i Roadmap
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Title,
		&i.Description,
		&i.IsPublic,
		&i.Category,
		&i.Tags,
		&i.Difficult,
		&i.CreatedAt,
	)
	return i, err
}

const getRoadmap = `-- name: GetRoadmap :one
SELECT id, owner_id, title, description, is_public, category, tags, difficult, created_at FROM roadmaps WHERE id = $1
`

func (q *Queries) GetRoadmap(ctx context.Context, id uuid.UUID) (Roadmap, error) {
	row := q.db.QueryRow(ctx, getRoadmap, id)
	var i Roadmap
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Title,
		&i.Description,
		&i.IsPublic,
		&i.Category,
		&i.Tags,
		&i.Difficult,
		&i.CreatedAt,
	)
	return i, err
}

const listUserRoadmaps = `-- name: ListUserRoadmaps :many
SELECT id, owner_id, title, description, is_public, category, tags, difficult, created_at FROM roadmaps WHERE owner_id = $1 ORDER BY created_at DESC
`

func (q *Queries) ListUserRoadmaps(ctx context.Context, ownerID uuid.UUID) ([]Roadmap, error) {
	rows, err := q.db.Query(ctx, listUserRoadmaps, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Roadmap
	for rows.Next() {
		var i Roadmap
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Title,
			&i.Description,
			&i.IsPublic,
			&i.Category,
			&i.Tags,
			&i.Difficult,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
