// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: checkpoint_query.sql

package checkpointgen

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createCheckpoint = `-- name: CreateCheckpoint :one
INSERT INTO checkpoints (roadmap_id, title, description, position, status)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, roadmap_id, title, description, position, type, status, estimated_time, reward_points, created_at
`

type CreateCheckpointParams struct {
	RoadmapID   pgtype.UUID `json:"roadmap_id"`
	Title       string      `json:"title"`
	Description pgtype.Text `json:"description"`
	Position    int32       `json:"position"`
	Status      pgtype.Text `json:"status"`
}

func (q *Queries) CreateCheckpoint(ctx context.Context, arg CreateCheckpointParams) (Checkpoint, error) {
	row := q.db.QueryRow(ctx, createCheckpoint,
		arg.RoadmapID,
		arg.Title,
		arg.Description,
		arg.Position,
		arg.Status,
	)
	var i Checkpoint
	err := row.Scan(
		&i.ID,
		&i.RoadmapID,
		&i.Title,
		&i.Description,
		&i.Position,
		&i.Type,
		&i.Status,
		&i.EstimatedTime,
		&i.RewardPoints,
		&i.CreatedAt,
	)
	return i, err
}

const getCheckpoint = `-- name: GetCheckpoint :one
SELECT id, roadmap_id, title, description, position, type, status, estimated_time, reward_points, created_at FROM checkpoints WHERE id = $1
`

func (q *Queries) GetCheckpoint(ctx context.Context, id uuid.UUID) (Checkpoint, error) {
	row := q.db.QueryRow(ctx, getCheckpoint, id)
	var i Checkpoint
	err := row.Scan(
		&i.ID,
		&i.RoadmapID,
		&i.Title,
		&i.Description,
		&i.Position,
		&i.Type,
		&i.Status,
		&i.EstimatedTime,
		&i.RewardPoints,
		&i.CreatedAt,
	)
	return i, err
}

const listCheckpoints = `-- name: ListCheckpoints :many
SELECT id, roadmap_id, title, description, position, type, status, estimated_time, reward_points, created_at FROM checkpoints WHERE roadmap_id = $1 ORDER BY position ASC
`

func (q *Queries) ListCheckpoints(ctx context.Context, roadmapID pgtype.UUID) ([]Checkpoint, error) {
	rows, err := q.db.Query(ctx, listCheckpoints, roadmapID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Checkpoint
	for rows.Next() {
		var i Checkpoint
		if err := rows.Scan(
			&i.ID,
			&i.RoadmapID,
			&i.Title,
			&i.Description,
			&i.Position,
			&i.Type,
			&i.Status,
			&i.EstimatedTime,
			&i.RewardPoints,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
